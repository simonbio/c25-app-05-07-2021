runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Web-scrape C25 stock list
c25 <- read_html("https://en.wikipedia.org/wiki/OMX_Copenhagen_25") %>%
html_node("table.wikitable") %>%
html_table() %>%
select(-IPO)
as_tibble()
# Format names
names(c25) <- c25 %>%
names() %>%
str_to_lower() %>%
make.names()
View(c25)
# Format ticker to yahoo syntax
c25$ticker.symbol <- c25$ticker.symbol %>% gsub(pattern = ' ', replacement = '-') %>% paste0('.CO')
runApp()
c25 <- read_html("https://en.wikipedia.org/wiki/OMX_Copenhagen_25") %>%
html_node("table.wikitable") %>%
html_table() %>%
select(-IPO)
as_tibble()
View(c25)
c25 <- read_html("https://en.wikipedia.org/wiki/OMX_Copenhagen_25") %>%
html_node("table.wikitable") %>%
html_table()
View(c25)
runApp()
runApp()
runApp()
runApp()
link
tagList()
?tagList
runApp()
runApp()
runApp()
runApp()
getSymbols('^OMXC25')
df <- data.frame(Date=index(AAPL),coredata(AAPL))
# create Bollinger Bands
bbands <- BBands(AAPL[,c("AAPL.High","AAPL.Low","AAPL.Close")])
# join and subset data
df <- filter(cbind(df, data.frame(bbands[,1:3])), Date >= "2015-02-14")
# colors column for increasing and decreasing
df <- df %>% mutate(direction = ifelse(df$AAPL.Close >= df$AAPL.Open, 'Increasing', 'Decreasing'))
# for (i in 1:length(df[,1])) {
#   if (df$AAPL.Close[i] >= df$AAPL.Open[i]) {
#     df$direction[i] = 'Increasing'
#   } else {
#     df$direction[i] = 'Decreasing'
#   }
# }
i <- list(line = list(color = '#7F7F7F'))
d <- list(line = list(color = '#17BECF'))
# plot candlestick chart
fig <- df %>% plot_ly(x = ~Date, type="candlestick",
open = ~AAPL.Open, close = ~AAPL.Close,
high = ~AAPL.High, low = ~AAPL.Low, name = "AAPL",
increasing = i, decreasing = d)
fig <- fig %>% add_lines(x = ~Date, y = ~up , name = "B Bands",
line = list(color = '#ccc', width = 0.6),
legendgroup = "Bollinger Bands",
hoverinfo = "none", inherit = F)
fig <- fig %>% add_lines(x = ~Date, y = ~dn, name = "B Bands",
line = list(color = '#ccc', width = 0.6),
legendgroup = "Bollinger Bands", inherit = F,
showlegend = FALSE, hoverinfo = "none")
fig <- fig %>% add_lines(x = ~Date, y = ~mavg, name = "Mv Avg",
line = list(color = '#E377C2', width = 0.6),
hoverinfo = "none", inherit = F)
fig <- fig %>% layout(yaxis = list(title = "Price"))
# plot volume bar chart
fig2 <- df
fig2 <- fig2 %>% plot_ly(x=~Date, y=~AAPL.Volume, type='bar', name = "AAPL Volume",
color = ~direction, colors = c('#7F7F7F','#17BECF'))
fig2 <- fig2 %>% layout(yaxis = list(title = "Volume"))
# create rangeselector buttons
rs <- list(visible = TRUE, x = 0.5, y = -0.055,
xanchor = 'center', yref = 'paper',
font = list(size = 9),
buttons = list(
list(
step = "all",
count = 1,
label = "reset"
),
list(
step = "year",
count = 1,
label = "1yr",
stepmode = "backward"
),
list(
step = "month",
count = 3,
label = "3 mo",
stepmode = "backward"
),
list(
step = "month",
count = 1,
label = "1 mo",
stepmode = "backward")
))
# subplot with shared x axis
fig <- subplot(fig, fig2, heights = c(0.7,0.2), nrows=2,
shareX = TRUE, titleY = TRUE)
fig <- fig %>% layout(title = paste("Apple: 2015-02-14 -",Sys.Date()),
xaxis = list(rangeselector = rs),
legend = list(orientation = 'h', x = 0.5, y = 1,
xanchor = 'center', yref = 'paper',
font = list(size = 10),
bgcolor = 'transparent'))
fig
shiny::runApp()
runApp()
runApp()
getSymbols('^OMXC25')
OMXC25 <- na.omit(OMXC25)
df <- data.frame(Date=index(OMXC25),coredata(OMXC25))
# create Bollinger Bands
bbands <- BBands(OMXC25[,c("OMXC25.High","OMXC25.Low","OMXC25.Close")])
# join and subset data
df <- filter(cbind(df, data.frame(bbands[,1:3])), Date >= "2015-02-14")
# colors column for increasing and decreasing
df <- df %>% mutate(direction = ifelse(df$OMXC25.Close >= df$OMXC25.Open, 'Increasing', 'Decreasing'))
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getSymbols('^OMXC25')
OMXC25 <- na.omit(OMXC25)
df <- data.frame(Date=index(OMXC25),coredata(OMXC25))
# create Bollinger Bands
bbands <- BBands(OMXC25[,c("OMXC25.High","OMXC25.Low","OMXC25.Close")])
# join and subset data
df <- filter(cbind(df, data.frame(bbands[,1:3])), Date >= "2015-02-14")
# colors column for increasing and decreasing
df <- df %>% mutate(direction = ifelse(df$OMXC25.Close >= df$OMXC25.Open, 'Increasing', 'Decreasing'))
# for (i in 1:length(df[,1])) {
#   if (df$AAPL.Close[i] >= df$AAPL.Open[i]) {
#     df$direction[i] = 'Increasing'
#   } else {
#     df$direction[i] = 'Decreasing'
#   }
# }
i <- list(line = list(color = '#7F7F7F'))
d <- list(line = list(color = '#17BECF'))
# plot candlestick chart
fig <- df %>% plot_ly(x = ~Date, type="candlestick",
open = ~OMXC25.Open, close = ~OMXC25.Close,
high = ~OMXC25.High, low = ~OMXC25.Low, name = "AAPL",
increasing = i, decreasing = d)
fig <- fig %>% add_lines(x = ~Date, y = ~up , name = "B Bands",
line = list(color = '#ccc', width = 0.6),
legendgroup = "Bollinger Bands",
hoverinfo = "none", inherit = F)
fig <- fig %>% add_lines(x = ~Date, y = ~dn, name = "B Bands",
line = list(color = '#ccc', width = 0.6),
legendgroup = "Bollinger Bands", inherit = F,
showlegend = FALSE, hoverinfo = "none")
fig <- fig %>% add_lines(x = ~Date, y = ~mavg, name = "Mv Avg",
line = list(color = '#E377C2', width = 0.6),
hoverinfo = "none", inherit = F)
fig <- fig %>% layout(yaxis = list(title = "Price"))
# plot volume bar chart
fig2 <- df
fig2 <- fig2 %>% plot_ly(x=~Date, y=~AAPL.Volume, type='bar', name = "AAPL Volume",
color = ~direction, colors = c('#7F7F7F','#17BECF'))
fig2 <- fig2 %>% layout(yaxis = list(title = "Volume"))
# create rangeselector buttons
rs <- list(visible = TRUE, x = 0.5, y = -0.055,
xanchor = 'center', yref = 'paper',
font = list(size = 9),
buttons = list(
list(
step = "all",
count = 1,
label = "reset"
),
list(
step = "year",
count = 1,
label = "1yr",
stepmode = "backward"
),
list(
step = "month",
count = 3,
label = "3 mo",
stepmode = "backward"
),
list(
step = "month",
count = 1,
label = "1 mo",
stepmode = "backward")
))
# subplot with shared x axis
fig <- subplot(fig, fig2, heights = c(0.7,0.2), nrows=2,
shareX = TRUE, titleY = TRUE)
fig <- fig %>% layout(title = paste("Apple: 2015-02-14 -",Sys.Date()),
xaxis = list(rangeselector = rs),
legend = list(orientation = 'h', x = 0.5, y = 1,
xanchor = 'center', yref = 'paper',
font = list(size = 10),
bgcolor = 'transparent'))
fig
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Web-scrape C25 stock list
c25 <- read_html("https://en.wikipedia.org/wiki/OMX_Copenhagen_25") %>%
html_node("table.wikitable") %>%
html_table() %>%
select(-IPO)
as_tibble()
# Format names
names(c25) <- c25 %>%
names() %>%
str_to_lower() %>%
make.names()
# Format ticker to yahoo syntax
c25$ticker.symbol <- c25$ticker.symbol %>% gsub(pattern = ' ', replacement = '-') %>% paste0('.CO')
get_stock_prices <- function(ticker, return_format = "tibble", ...) {
# Get stock prices
stock_prices_xts <- getSymbols(Symbols = ticker, auto.assign = FALSE)
# Rename
names(stock_prices_xts) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
# Return in xts format if tibble is not specified
if (return_format == "tibble") {
stock_prices <- data.frame(index(stock_prices_xts), coredata(stock_prices_xts)) %>%
as_tibble() %>%
rename(Date = index.stock_prices_xts.)
} else {
stock_prices <- stock_prices_xts
}
stock_prices
}
get_log_returns <- function(x, return_format = "tibble", period = 'daily', ...) {
# Convert tibble to xts
if (!is.xts(x)) {
x <- xts(x[,-1], order.by = x$Date)
}
# Get log returns
log_returns_xts <- periodReturn(x = x$Adjusted, type = 'log', period = period)
# Rename
names(log_returns_xts) <- "Log.Returns"
# Return in xts format if tibble is not specified
if (return_format == "tibble") {
log_returns <- data.frame(index(log_returns_xts), coredata(log_returns_xts)) %>%
as_tibble() %>%
rename(Date = index.log_returns_xts.)
} else {
log_returns <- log_returns_xts
}
log_returns
}
c25 <- c25 %>%
mutate(
stock.prices = map(ticker.symbol,
function(.x) get_stock_prices(.x,
return_format = "tibble",
from = "2007-01-01",
to = "2021-07-01")
),
log.returns  = map(stock.prices,
function(.x) get_log_returns(.x, return_format = "tibble")),
mean.log.returns = map_dbl(log.returns, ~ mean(.$Log.Returns)),
sd.log.returns   = map_dbl(log.returns, ~ sd(.$Log.Returns)),
n.trade.days = map_dbl(stock.prices, nrow)
)
View(c25)
View(c25[[5]][[1]])
runApp()
library('quantmod')
library('tidyverse')
library('plotly')
library('lubridate')
library('rvest')
library('highcharter')
# Web-scrape C25 stock list
c25 <- read_html("https://en.wikipedia.org/wiki/OMX_Copenhagen_25") %>%
html_node("table.wikitable") %>%
html_table() %>%
select(-IPO)
as_tibble()
# Format names
names(c25) <- c25 %>%
names() %>%
str_to_lower() %>%
make.names()
# Format ticker to yahoo syntax
c25$ticker.symbol <- c25$ticker.symbol %>% gsub(pattern = ' ', replacement = '-') %>% paste0('.CO')
get_stock_prices <- function(ticker, return_format = "tibble", ...) {
# Get stock prices
stock_prices_xts <- getSymbols(Symbols = ticker, auto.assign = FALSE)
# Rename
names(stock_prices_xts) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted")
# Return in xts format if tibble is not specified
if (return_format == "tibble") {
stock_prices <- data.frame(index(stock_prices_xts), coredata(stock_prices_xts)) %>%
as_tibble() %>%
rename(Date = index.stock_prices_xts.)
} else {
stock_prices <- stock_prices_xts
}
stock_prices
}
get_log_returns <- function(x, return_format = "tibble", period = 'daily', ...) {
# Convert tibble to xts
if (!is.xts(x)) {
x <- xts(x[,-1], order.by = x$Date)
}
# Get log returns
log_returns_xts <- periodReturn(x = x$Adjusted, type = 'log', period = period)
# Rename
names(log_returns_xts) <- "Log.Returns"
# Return in xts format if tibble is not specified
if (return_format == "tibble") {
log_returns <- data.frame(index(log_returns_xts), coredata(log_returns_xts)) %>%
as_tibble() %>%
rename(Date = index.log_returns_xts.)
} else {
log_returns <- log_returns_xts
}
log_returns
}
c25 <- c25 %>%
mutate(
stock.prices = map(ticker.symbol,
function(.x) get_stock_prices(.x,
return_format = "tibble",
from = "2007-01-01",
to = "2021-07-01")
),
log.returns  = map(stock.prices,
function(.x) get_log_returns(.x, return_format = "tibble")),
mean.log.returns = map_dbl(log.returns, ~ mean(.$Log.Returns)),
sd.log.returns   = map_dbl(log.returns, ~ sd(.$Log.Returns)),
n.trade.days = map_dbl(stock.prices, nrow)
)
plot_ly(data   = test,
type   = "scatter",
mode   = "markers",
x      = ~ sd.log.returns,
y      = ~ mean.log.returns,
# color  = 'blue',
#colors = 'Greens',
size   = ~ n.trade.days,
sizes = c(50,150),
text   = ~ str_c("<em>", company, "</em><br>",
"Ticker: ", ticker.symbol, "<br>",
"Sector: ", gics.sector, "<br>",
"Founded: ", founded, "<br>",
"No. of Trading Days: ", n.trade.days),
marker = list(opacity = 0.8,
symbol = 'circle',
sizemode = 'diameter',
sizeref = 4.0,
line = list(width = 1, color = 'lightgrey'))) %>%
layout(title   = 'C25 Analysis: Stock Risk vs Reward',
xaxis   = list(title = 'Risk/Variability (StDev Log Returns)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis   = list(title = 'Reward/Growth (Mean Log Returns)',
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
margin = list(l = 100,
t = 100,
b = 100)) %>%
hide_colorbar()
#
plot_ly(data   = c25,
type   = "scatter",
mode   = "markers",
x      = ~ sd.log.returns,
y      = ~ mean.log.returns,
# color  = 'blue',
#colors = 'Greens',
size   = ~ n.trade.days,
sizes = c(50,150),
text   = ~ str_c("<em>", company, "</em><br>",
"Ticker: ", ticker.symbol, "<br>",
"Sector: ", gics.sector, "<br>",
"Founded: ", founded, "<br>",
"No. of Trading Days: ", n.trade.days),
marker = list(opacity = 0.8,
symbol = 'circle',
sizemode = 'diameter',
sizeref = 4.0,
line = list(width = 1, color = 'lightgrey'))) %>%
layout(title   = 'C25 Analysis: Stock Risk vs Reward',
xaxis   = list(title = 'Risk/Variability (StDev Log Returns)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis   = list(title = 'Reward/Growth (Mean Log Returns)',
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
margin = list(l = 100,
t = 100,
b = 100)) %>%
hide_colorbar()
runApp()
runApp()
runApp()
getSymbols('^OMXC25')
OMXC25 <- na.omit(OMXC25)
df <- data.frame(Date=index(OMXC25),coredata(OMXC25))
# create Bollinger Bands
bbands <- BBands(OMXC25[,c("OMXC25.High","OMXC25.Low","OMXC25.Close")])
# join and subset data
df <- filter(cbind(df, data.frame(bbands[,1:3])), Date >= "2015-02-14")
# colors column for increasing and decreasing
df <- df %>% mutate(direction = ifelse(df$OMXC25.Close >= df$OMXC25.Open, 'Increasing', 'Decreasing'))
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
# Web-scrape C25 stock list
c25 <- read_html("https://en.wikipedia.org/wiki/OMX_Copenhagen_25") %>%
html_node("table.wikitable") %>%
html_table() %>%
select(-IPO)
as_tibble()
# Format names
names(c25) <- c25 %>%
names() %>%
str_to_lower() %>%
make.names()
# Format ticker to yahoo syntax
c25$ticker.symbol <- c25$ticker.symbol %>% gsub(pattern = ' ', replacement = '-') %>% paste0('.CO')
View(c25)
View(c25)
# Web-scrape C25 stock list
c25<- read_html("https://en.wikipedia.org/wiki/OMX_Copenhagen_25") %>%
html_node("table.wikitable") %>%
html_table() %>%
select(-IPO)
View(c25)
# Format names
names(c25) <- c25 %>%
names() %>%
str_to_lower() %>%
make.names()
?make.names()
library('quantmod')
library('tidyverse')
library('plotly')
library('lubridate')
library('rvest')
library('highcharter')
# Web-scrape C25 stock list
c25<- read_html("https://en.wikipedia.org/wiki/OMX_Copenhagen_25") %>%
html_node("table.wikitable") %>%
html_table() %>%
select(-IPO)
View(c25)
# Format names
names(c25) <- c25 %>%
names() %>%
str_to_lower() %>%
make.names()
names(c25)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
